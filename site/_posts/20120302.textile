---
title: Fillets
tags: pinball
date: 20120302
---
I wanted a way to automatically round off corners in a path. In engineering this is called a 'fillet', in fact Fireworks has an option to fillet a path but I could not find an algorithm to do this so I had to figure it out.

fig. The end result - a filleted path | http://i.imgur.com/OSYTo.png

Now, drawing an arc is pretty simple but this requires finding the position of the centre of the arc from the two lines.

So the problem here is given the points p0, p1, p2 and the length r, find the point c.

Originally I was doing some trigonometry involving the sine rule to find the distance from c to p1. This was hefty and I kept getting issues from different quadrants and problems finding the average of two angles. Anyway, this was getting far too much effort than it was worth and I was about to give up, but just then I realised I could use vectors and everything was so much easier.

fig. http://i.imgur.com/cCoMl.png

Firstly:

bc.. 
p1to0 = (p0 - p1).normalize()
p1to2 = (p2 - p1).normalize()
mid = (p1to0 + p1to2).normalize()

p. mid is now a direction vector pointing to c from p1

Now the distance from p1 to c I knew from my failed trigonometry attempts was r/(sin theta/2) where theta was the angle between the two lines. We all know that the sin of the angle between two vectors is the cross product of each. Therefore:

bc. hyp = r / abs(p1to0.cross(mid))

And then c can be found by the following

bc. c = mid.multiply(hyp).add(p1)

Simple five lines of code which works whichever direction the lines are coming from. The only thing to look out for is when the lines are parallel and a divide-by-zero error occurs.

As a bonus

I also needed to find the points where the circle touched the lines. This was also easy.

bc.. 
p1to2normal = p1to2.normal() // counter-clockwise normal
p1to0normal = -p1to0.normal() // clockwise normal
// These normals should point 'outwards' from c
if p1to0.cross(p1to2) < 0 then
  p1to2normal *= -1
  p1to0normal *= -1
end
a = p1to2normal.multiply(r).add(c)
b = p1to0normal.multiply(r).add(c)

p. Hope this helps someone!